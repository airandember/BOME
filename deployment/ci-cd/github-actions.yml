# BOME Streaming - CI/CD Pipeline
# Comprehensive GitHub Actions workflow for automated build, test, and deployment

name: BOME Streaming CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *' # Daily security scans

env:
  NODE_VERSION: '18'
  GO_VERSION: '1.21'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: bome-streaming

jobs:
  # =============================================================================
  # Code Quality & Security Checks
  # =============================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Install backend dependencies
        run: |
          cd backend
          go mod download

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint

      - name: Run Prettier check
        run: |
          cd frontend
          npm run format:check

      - name: Run Go linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: backend

      - name: Run security audit (npm)
        run: |
          cd frontend
          npm audit --audit-level=high

      - name: Run security scan (Go)
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: 'gosec-report.sarif'

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # =============================================================================
  # Automated Testing
  # =============================================================================
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run unit tests
        run: |
          cd frontend
          npm run test:unit

      - name: Run integration tests
        run: |
          cd frontend
          npm run test:integration

      - name: Generate test coverage
        run: |
          cd frontend
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: bome_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          go mod download

      - name: Run unit tests
        run: |
          cd backend
          go test ./... -v -coverprofile=coverage.out
        env:
          DATABASE_URL: postgres://postgres:test@localhost:5432/bome_test?sslmode=disable
          REDIS_URL: redis://localhost:6379

      - name: Generate test coverage
        run: |
          cd backend
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.out
          flags: backend

  # =============================================================================
  # End-to-End Testing
  # =============================================================================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Playwright
        run: |
          cd frontend
          npm ci
          npx playwright install

      - name: Start application stack
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: frontend/test-results/

      - name: Stop application stack
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down

  # =============================================================================
  # Performance Testing
  # =============================================================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install -g lighthouse artillery

      - name: Start application
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run Lighthouse audit
        run: |
          lighthouse http://localhost:5173 --output=json --output-path=lighthouse-report.json

      - name: Run load tests
        run: |
          artillery run performance/load-test.yml

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: |
            lighthouse-report.json
            artillery-report.json

  # =============================================================================
  # Build & Package
  # =============================================================================
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign container image
        uses: sigstore/cosign-installer@v3
      - name: Sign the images
        run: |
          cosign sign --yes ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        env:
          COSIGN_EXPERIMENTAL: 1

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk security scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ needs.build.outputs.image-tag }}

  # =============================================================================
  # Deployment to Staging
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.bookofmormonevidence.org
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          helm upgrade --install bome-staging ./helm/bome \
            --namespace staging \
            --set image.repository=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.sha }} \
            --set environment=staging \
            --values helm/values-staging.yaml

      - name: Run smoke tests
        run: |
          sleep 60
          curl -f https://staging.bookofmormonevidence.org/health || exit 1

  # =============================================================================
  # Deployment to Production
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://bookofmormonevidence.org
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Blue-Green Deployment
        run: |
          # Deploy to green environment
          helm upgrade --install bome-green ./helm/bome \
            --namespace production \
            --set image.repository=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.sha }} \
            --set environment=production \
            --set deployment.color=green \
            --values helm/values-production.yaml

      - name: Health check green deployment
        run: |
          sleep 120
          for i in {1..10}; do
            if curl -f https://green.bookofmormonevidence.org/health; then
              echo "Green deployment is healthy"
              break
            fi
            sleep 30
          done

      - name: Switch traffic to green
        run: |
          kubectl patch service bome-service -p '{"spec":{"selector":{"color":"green"}}}'

      - name: Cleanup blue deployment
        run: |
          sleep 300  # Wait 5 minutes before cleanup
          helm uninstall bome-blue --namespace production || true

      - name: Run post-deployment tests
        run: |
          curl -f https://bookofmormonevidence.org/health || exit 1
          curl -f https://bookofmormonevidence.org/api/health || exit 1

  # =============================================================================
  # Rollback Capability
  # =============================================================================
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Rollback to previous version
        run: |
          helm rollback bome --namespace production

      - name: Verify rollback
        run: |
          sleep 60
          curl -f https://bookofmormonevidence.org/health || exit 1

  # =============================================================================
  # Post-Deployment Monitoring
  # =============================================================================
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Setup monitoring alerts
        run: |
          curl -X POST "${{ secrets.GRAFANA_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "title": "Deployment Successful",
              "message": "BOME Streaming deployed successfully to production",
              "tags": ["deployment", "production"],
              "severity": "info"
            }'

      - name: Run synthetic monitoring
        run: |
          # Run synthetic tests every 5 minutes for 1 hour
          for i in {1..12}; do
            curl -f https://bookofmormonevidence.org/health || echo "Health check failed at $(date)"
            sleep 300
          done

  # =============================================================================
  # Cleanup
  # =============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-monitoring]
    if: always()
    steps:
      - name: Clean up old container images
        run: |
          # Keep only last 10 versions
          echo "Cleaning up old container images..."

      - name: Clean up test artifacts
        run: |
          echo "Cleaning up test artifacts..."

      - name: Update deployment status
        run: |
          curl -X POST "${{ secrets.DEPLOYMENT_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "repository": "${{ github.repository }}",
              "commit": "${{ github.sha }}",
              "status": "completed",
              "environment": "production",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }' 